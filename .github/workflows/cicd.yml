---
name: mini-soc-cicd

'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  INDEXER_IMAGE: "wazuh/wazuh-indexer:4.7.2"
  MANAGER_IMAGE: "wazuh/wazuh-manager:4.7.2"
  DASHBOARD_IMAGE: "wazuh/wazuh-dashboard:4.7.2"
  TRAEFIK_IMAGE: "traefik:2.11.2"

jobs:
  lint:
    name: Lint (ansible-lint & yamllint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Ansible + linters
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ansible
          pip install ansible-lint yamllint

      - name: Install required Ansible collections
        run: |
          ansible-galaxy collection install -r ansible/requirements.yml
          echo "ANSIBLE_COLLECTIONS_PATH=$HOME/.ansible/collections:\
          /usr/share/ansible/collections" >> "$GITHUB_ENV"

      - name: Run yamllint
        run: |
          yamllint -s .

      - name: Run ansible-lint
        run: |
          ansible-lint -v

  build:
    name: Build container image (dashboard-extended)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: |
          docker build \
            -t local/wazuh-dashboard-extended:4.7.2 \
            -f docker/Dockerfile.wazuh-dashboard-extended \
            .

      - name: Save image as artifact (optional)
        run: |
          docker save local/wazuh-dashboard-extended:4.7.2 \
            | gzip \
            > dashboard-extended-4.7.2.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-extended-4.7.2
          path: dashboard-extended-4.7.2.tar.gz

  scan:
    name: Trivy scan (fail on HIGH/CRITICAL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy indexer
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.INDEXER_IMAGE }}
          scan-type: image
          trivy-config: trivy/trivy.yaml

      - name: Trivy manager
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.MANAGER_IMAGE }}
          scan-type: image
          trivy-config: trivy/trivy.yaml

      - name: Trivy dashboard
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.DASHBOARD_IMAGE }}
          scan-type: image
          trivy-config: trivy/trivy.yaml

      - name: Trivy traefik
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.TRAEFIK_IMAGE }}
          scan-type: image
          trivy-config: trivy/trivy.yaml

  test:
    name: Selenium UI test (HTTPS + login form)
    runs-on: ubuntu-latest
    env:
      TEST_URL: ${{ secrets.TEST_URL }}
      TEST_USER: ${{ secrets.TEST_USER }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Install chromedriver
        uses: nanasess/setup-chromedriver@v2

      - name: Install test requirements
        run: |
          pip install -r tests/requirements.txt

      - name: Run Selenium tests (headless)
        run: |
          python -m pytest -q tests/selenium/test_dashboard.py \
            --maxfail=1 \
            --disable-warnings

  deploy:
    name: Deploy locally on self-hosted runner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - lint
      - build
      - scan
      - test
    runs-on: self-hosted
    env:
      ANSIBLE_VAULT_PASS: ${{ secrets.ANSIBLE_VAULT_PASS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure local inventory
        run: |
          mkdir -p ansible/inventories
          cat > ansible/inventories/production.yml <<'EOF'
          all:
            children:
              managers:
                hosts:
                  soc-swarm-manager-1:
                    ansible_connection: local
          EOF

      - name: Install Ansible + collection
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ansible python3-pip
          ansible-galaxy collection install community.docker

      - name: Write vault pass file
        run: |
          printf "%s" "$ANSIBLE_VAULT_PASS" > .vault_pass
          chmod 600 .vault_pass

      - name: Deploy (local)
        run: |
          set -o pipefail
          ansible-playbook \
            -i ansible/inventories/production.yml \
            ansible/deploy_wazuh.yml \
            --vault-password-file .vault_pass \
            | tee deploy.log

      - name: Upload deploy log
        uses: actions/upload-artifact@v4
        with:
          name: ansible-deploy-log
          path: deploy.log
